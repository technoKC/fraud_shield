{"ast":null,"code":"const handleFileUpload = async event => {\n  const file = event.target.files[0];\n  if (!file || !file.name.endsWith('.csv')) {\n    alert('Please upload a CSV file');\n    return;\n  }\n  setFileName(file.name);\n  setLoading(true);\n  const formData = new FormData();\n  formData.append('file', file);\n  try {\n    // First check if backend is running\n    const healthCheck = await fetch('http://localhost:8000/', {\n      method: 'GET'\n    });\n    if (!healthCheck.ok) {\n      throw new Error('Backend server is not responding');\n    }\n    const response = await fetch('http://localhost:8000/detect/', {\n      method: 'POST',\n      body: formData\n      // Don't set Content-Type header - let browser set it for FormData\n    });\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('Server response:', errorText);\n      throw new Error(`Server error: ${response.status} - ${errorText}`);\n    }\n    const result = await response.json();\n    setData(result);\n    setLoading(false);\n  } catch (error) {\n    console.error('Error details:', error);\n\n    // More specific error messages\n    if (error.message.includes('Failed to fetch') || error.message.includes('Network')) {\n      alert('Cannot connect to backend server. Please ensure:\\n1. Backend is running on port 8000\\n2. Run: python main.py in backend folder');\n    } else if (error.message.includes('Backend server is not responding')) {\n      alert('Backend server is not running. Please start it with: python main.py');\n    } else {\n      alert(`Error processing file: ${error.message}\\n\\nPlease check:\\n1. CSV format is correct\\n2. Backend logs for details`);\n    }\n    setLoading(false);\n  }\n};","map":{"version":3,"names":["handleFileUpload","event","file","target","files","name","endsWith","alert","setFileName","setLoading","formData","FormData","append","healthCheck","fetch","method","ok","Error","response","body","errorText","text","console","error","status","result","json","setData","message","includes"],"sources":["C:/Users/sahan/Desktop/radheradhe/FraudShield/frontend/src/components/Dashboard.js"],"sourcesContent":["const handleFileUpload = async (event) => {\r\n    const file = event.target.files[0];\r\n    if (!file || !file.name.endsWith('.csv')) {\r\n      alert('Please upload a CSV file');\r\n      return;\r\n    }\r\n\r\n    setFileName(file.name);\r\n    setLoading(true);\r\n\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n\r\n    try {\r\n      // First check if backend is running\r\n      const healthCheck = await fetch('http://localhost:8000/', {\r\n        method: 'GET',\r\n      });\r\n      \r\n      if (!healthCheck.ok) {\r\n        throw new Error('Backend server is not responding');\r\n      }\r\n\r\n      const response = await fetch('http://localhost:8000/detect/', {\r\n        method: 'POST',\r\n        body: formData,\r\n        // Don't set Content-Type header - let browser set it for FormData\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        console.error('Server response:', errorText);\r\n        throw new Error(`Server error: ${response.status} - ${errorText}`);\r\n      }\r\n\r\n      const result = await response.json();\r\n      setData(result);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.error('Error details:', error);\r\n      \r\n      // More specific error messages\r\n      if (error.message.includes('Failed to fetch') || error.message.includes('Network')) {\r\n        alert('Cannot connect to backend server. Please ensure:\\n1. Backend is running on port 8000\\n2. Run: python main.py in backend folder');\r\n      } else if (error.message.includes('Backend server is not responding')) {\r\n        alert('Backend server is not running. Please start it with: python main.py');\r\n      } else {\r\n        alert(`Error processing file: ${error.message}\\n\\nPlease check:\\n1. CSV format is correct\\n2. Backend logs for details`);\r\n      }\r\n      \r\n      setLoading(false);\r\n    }\r\n  };"],"mappings":"AAAA,MAAMA,gBAAgB,GAAG,MAAOC,KAAK,IAAK;EACtC,MAAMC,IAAI,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;EAClC,IAAI,CAACF,IAAI,IAAI,CAACA,IAAI,CAACG,IAAI,CAACC,QAAQ,CAAC,MAAM,CAAC,EAAE;IACxCC,KAAK,CAAC,0BAA0B,CAAC;IACjC;EACF;EAEAC,WAAW,CAACN,IAAI,CAACG,IAAI,CAAC;EACtBI,UAAU,CAAC,IAAI,CAAC;EAEhB,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;EAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEV,IAAI,CAAC;EAE7B,IAAI;IACF;IACA,MAAMW,WAAW,GAAG,MAAMC,KAAK,CAAC,wBAAwB,EAAE;MACxDC,MAAM,EAAE;IACV,CAAC,CAAC;IAEF,IAAI,CAACF,WAAW,CAACG,EAAE,EAAE;MACnB,MAAM,IAAIC,KAAK,CAAC,kCAAkC,CAAC;IACrD;IAEA,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAAC,+BAA+B,EAAE;MAC5DC,MAAM,EAAE,MAAM;MACdI,IAAI,EAAET;MACN;IACF,CAAC,CAAC;IAEF,IAAI,CAACQ,QAAQ,CAACF,EAAE,EAAE;MAChB,MAAMI,SAAS,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MACvCC,OAAO,CAACC,KAAK,CAAC,kBAAkB,EAAEH,SAAS,CAAC;MAC5C,MAAM,IAAIH,KAAK,CAAC,iBAAiBC,QAAQ,CAACM,MAAM,MAAMJ,SAAS,EAAE,CAAC;IACpE;IAEA,MAAMK,MAAM,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IACpCC,OAAO,CAACF,MAAM,CAAC;IACfhB,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC,CAAC,OAAOc,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;;IAEtC;IACA,IAAIA,KAAK,CAACK,OAAO,CAACC,QAAQ,CAAC,iBAAiB,CAAC,IAAIN,KAAK,CAACK,OAAO,CAACC,QAAQ,CAAC,SAAS,CAAC,EAAE;MAClFtB,KAAK,CAAC,gIAAgI,CAAC;IACzI,CAAC,MAAM,IAAIgB,KAAK,CAACK,OAAO,CAACC,QAAQ,CAAC,kCAAkC,CAAC,EAAE;MACrEtB,KAAK,CAAC,qEAAqE,CAAC;IAC9E,CAAC,MAAM;MACLA,KAAK,CAAC,0BAA0BgB,KAAK,CAACK,OAAO,0EAA0E,CAAC;IAC1H;IAEAnB,UAAU,CAAC,KAAK,CAAC;EACnB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}